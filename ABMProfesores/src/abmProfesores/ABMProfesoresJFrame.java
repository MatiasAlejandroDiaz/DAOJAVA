/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package abmProfesores;

import dao.Dao;
import dao.DaoException;
import dao.DaoFactoryException;
import dao.DaoProfesorFactory;
import java.awt.HeadlessException;
import java.io.File;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import persona.Profesor;

/**
 *
 * @author nestor
 */
public class ABMProfesoresJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ABMProfesoresJFrame
     */
    public ABMProfesoresJFrame() {
        this.config = new HashMap<>();
        initComponents();

        miModeloTabla = new MiModeloTabla();

        profesoresTable.setModel(miModeloTabla);

        profesores = new ArrayList<>();

        Map<String, String> config = new HashMap<String, String>();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        profesoresTable = new javax.swing.JTable();
        editarButton = new javax.swing.JButton();
        eliminarButton = new javax.swing.JButton();
        checkAlta = new javax.swing.JCheckBox();
        checkBaja = new javax.swing.JCheckBox();
        aplicarButton = new javax.swing.JButton();
        nuevoButton = new javax.swing.JButton();
        seleccionDaoComboBox = new javax.swing.JComboBox();
        fileTextField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        profesoresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(profesoresTable);

        editarButton.setText("Editar");
        editarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarButtonActionPerformed(evt);
            }
        });

        eliminarButton.setText("Eliminar");
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        checkAlta.setText("Alta");

        checkBaja.setText("Baja");

        aplicarButton.setText("Aplicar");
        aplicarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarButtonActionPerformed(evt);
            }
        });

        nuevoButton.setText("Nuevo");
        nuevoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoButtonActionPerformed(evt);
            }
        });

        seleccionDaoComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Txt", "BD" }));
        seleccionDaoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionDaoComboBoxActionPerformed(evt);
            }
        });

        fileButton.setText("Abrir Archivo");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eliminarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBaja)
                            .addComponent(checkAlta))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aplicarButton)
                        .addGap(18, 18, 18)
                        .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seleccionDaoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nuevoButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkAlta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBaja))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(aplicarButton)
                        .addComponent(nuevoButton)
                        .addComponent(seleccionDaoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fileButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eliminarButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nuevoButtonActionPerformed
    {//GEN-HEADEREND:event_nuevoButtonActionPerformed
        if(!IsDao())return;
        
        profesorJDialog = new ProfesorJDialog(this, true);

        boolean guardar = profesorJDialog.mostrarCrear();

        if (!guardar) {
            return;
        }

        Profesor profe = profesorJDialog.getProfesor();

        try {
            dao.insertar(profe);
            profesores.add(profe);
        } catch (DaoException ex) {
            Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se pudo insertar el profesor.");
        }

        miModeloTabla.refrescarTabla();
    }//GEN-LAST:event_nuevoButtonActionPerformed

    private boolean IsDao() {
        if (dao == null) {
            JOptionPane.showMessageDialog(this, "No esta conectado o con un archivo valido");
            return false;
        }
        return true;
    }


    private void editarButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editarButtonActionPerformed
    {//GEN-HEADEREND:event_editarButtonActionPerformed
        if(!IsDao())return;
        
        int filaSel = profesoresTable.getSelectedRow();
        
        if(filaSel < 0)
        {
            JOptionPane.showMessageDialog(this, "Selecione primero un profesor de la tabla");
            return;
        }
        
        Profesor profe = profesores.get(filaSel);
        
        profesorJDialog = new ProfesorJDialog(this, true);

        boolean guardar = profesorJDialog.mostrarEdicion(profe);

        if (!guardar) {
            return;
        }

        try {
            dao.actualizar(profe);
            profesores.set(filaSel, profe);
            miModeloTabla.setProfesores(profesores);
            miModeloTabla.refrescarTabla();
        } catch (DaoException ex) {
            Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se pudo Actualizar el profesor.");
        }     
    }//GEN-LAST:event_editarButtonActionPerformed

    private void aplicarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarButtonActionPerformed
        // TODO add your handling code here:
        if(!IsDao())return;
        
        if(!checkAlta.isSelected() && !checkBaja.isSelected())
            return;
        
        if(checkAlta.isSelected() && checkBaja.isSelected())
        {
            JOptionPane.showMessageDialog(this, "Selecione Alta o baja para cambiar el Estado");
            checkAlta.setSelected(false);
            checkBaja.setSelected(false);
            return;
        }
        
        
        String mensaje = checkAlta.isSelected()?"alta":"baja";
        int filaSel = profesoresTable.getSelectedRow();
        
        if(filaSel < 0)
        {
            JOptionPane.showMessageDialog(this, "Selecione primero un profesor de la tabla");
            return;
        }       
        
        Profesor prof =  profesores.get(filaSel);
        
        if(prof != null)
        {
            
            try {
               prof.setEstado(mensaje);
               dao.actualizar(prof);
               profesores.set(filaSel, prof);
               miModeloTabla.setProfesores(profesores);
               miModeloTabla.refrescarTabla();
                
            } catch (DaoException ex) {
                JOptionPane.showMessageDialog(this, "No se pudo Actualizar el profesor.");
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Selecione primero un profesor de la tabla");
        }

    }//GEN-LAST:event_aplicarButtonActionPerformed

    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed
        if(!IsDao())return;
        
        int filaSel = profesoresTable.getSelectedRow();
        
        if(filaSel < 0)
        {
            JOptionPane.showMessageDialog(this, "Selecione primero un profesor de la tabla");
            return;
        }
        
        Profesor profe = profesores.get(filaSel);
        try {
            dao.eliminar(profe);
            profesores.remove(profe);
            miModeloTabla.setProfesores(profesores);
            miModeloTabla.refrescarTabla();
        } catch (DaoException ex) {
            Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se pudo eliminar el profesor.");
        }
        

    }//GEN-LAST:event_eliminarButtonActionPerformed

    private void seleccionDaoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionDaoComboBoxActionPerformed
        // TODO add your handling code here:
        int i = seleccionDaoComboBox.getSelectedIndex();

        switch (i) {
            case 0:
                fileButton.setText("Abrir Archivo");
                if (daoTxt != null) {

                    try {
                        dao.Cerrar();
                        dao = daoTxt;
                        profesores = dao.getTodos();
                        miModeloTabla.setProfesores(profesores);
                        miModeloTabla.refrescarTabla();
                    } catch (DaoException ex) {
                        Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    fileTextField.setText(config.get("NOMBRE_ARCHIVO"));
                }
                break;
            case 1:
                fileButton.setText("Conectar a Base de Datos");
                if (daoDB != null) {
                    try {
                        dao.Cerrar();
                        config.put(DaoProfesorFactory.NOMBRE_ARCHIVO, UltimaConeccionJDBC);
                        if (ConnectBD()) {
                            return;
                        }
                        profesores = dao.getTodos();
                        miModeloTabla.setProfesores(profesores);
                        miModeloTabla.refrescarTabla();
                    } catch (DaoException ex) {
                        Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    fileTextField.setText(config.get("NOMBRE_ARCHIVO"));
                }

                break;

        }
    }//GEN-LAST:event_seleccionDaoComboBoxActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        // TODO add your handling code here:
        int i = seleccionDaoComboBox.getSelectedIndex();

        switch (i) {
            case 0:
                System.out.println("Se selecciono el txt");
                JFileChooser fileChooser = new JFileChooser();

                int ret = fileChooser.showOpenDialog(this);

                if (ret != JFileChooser.APPROVE_OPTION) {
                    return;
                }

                File archivo = fileChooser.getSelectedFile();

                config.put(DaoProfesorFactory.NOMBRE_ARCHIVO, archivo.getAbsolutePath());
                ultimoPathArchivo = archivo.getAbsolutePath();

                try {
                    daoTxt = DaoProfesorFactory.getInstance().crearDao("TXT", config);
                } catch (DaoFactoryException ex) {
                    Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "El Archivo no se pudo Abrir Correctamente.");
                    
                } catch (DaoException ex) {
                    Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "El Archivo no se pudo Abrir Correctamente.");
                }
                dao = daoTxt;

                try {
                    profesores = dao.getTodos();
                    miModeloTabla.setProfesores(profesores);
                    miModeloTabla.refrescarTabla();
                } catch (DaoException ex) {
                    Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "No se Pudo Leer El Archivo Correctamente.");
                }

                break;
            case 1:
                System.out.println("se selecciono la bd");
                datosConexionBDDialog BDWindows = new datosConexionBDDialog(this, rootPaneCheckingEnabled);
                boolean res = BDWindows.MostrarDatosDB();

                if (res == false) {
                    return;
                }
                
                config.put(DaoProfesorFactory.NOMBRE_ARCHIVO, BDWindows.GetStringBDCon());
                UltimaConeccionJDBC = BDWindows.GetStringBDCon();
                config.put(DaoProfesorFactory.NOMBRE_USER, BDWindows.GetUser());
                config.put(DaoProfesorFactory.NOMBRE_PASS, BDWindows.GetPass());
                
                if (ConnectBD()) {
                    return;
                }
                
                try {
                    profesores = dao.getTodos();
                    miModeloTabla.setProfesores(profesores);
                    miModeloTabla.refrescarTabla();
                } catch (DaoException ex) {
                    Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "No se Pudo Obtener los profesores de la Base de datos.");

                }

                break;
        }

    }//GEN-LAST:event_fileButtonActionPerformed

    private boolean ConnectBD() {
        try {
            daoDB = daoFactory.getInstance().crearDao("BD", config);
        } catch (DaoFactoryException ex) {
            Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se Pudo Establecer la coneccion con la Base de datos.");
            return true;
        } catch (DaoException ex) {
            Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se Pudo Establecer la coneccion con la Base de datos.");
            return true;
        }
        //DAO FIN
        dao = daoDB;
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ABMProfesoresJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ABMProfesoresJFrame().setVisible(true);
            }
        });
    }

    private ProfesorJDialog profesorJDialog;
    private MiModeloTabla miModeloTabla;
    private List<Profesor> profesores;
    private final DaoProfesorFactory daoFactory = DaoProfesorFactory.getInstance();
    private final Map<String, String> config;
    private String UltimaConeccionJDBC;
    private String ultimoPathArchivo;
    private Dao<Profesor, Integer> daoDB = null;
    private Dao<Profesor, Integer> daoTxt = null;
    private Dao<Profesor, Integer> dao;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aplicarButton;
    private javax.swing.JCheckBox checkAlta;
    private javax.swing.JCheckBox checkBaja;
    private javax.swing.JButton editarButton;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JButton fileButton;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nuevoButton;
    private javax.swing.JTable profesoresTable;
    private javax.swing.JComboBox seleccionDaoComboBox;
    // End of variables declaration//GEN-END:variables
}
